{"version":3,"sources":["StatusMessage.js","Filter.js","PersonForm.js","Number.js","Persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["StatusMessage","message","messageType","messageStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","Filter","changeHandler","value","onChange","PersonForm","addNameHandler","handleNameChangeHandler","name","handleNumberChangeHandler","number","onSubmit","type","Number","person","filter","personRemoveHandler","toUpperCase","includes","onClick","data-person-id","id","Persons","persons","newFilter","map","key","baseurl","axios","get","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","setMessage","hook","personService","then","response","data","useEffect","showMessage","timeout","setTimeout","AddName","concat","replaceNumber","index","console","log","catch","finally","event","target","preventDefault","personIndex","findIndex","window","confirm","attributes","toString","removedPerson","removeName","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a5c3c31.chunk.js","sourcesContent":["import React from 'react'\n\nconst StatusMessage = ({message, messageType}) => {\n\n    let messageStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if(message==='') {\n        return null\n    }\n\n    if( messageType === 'error') {\n        messageStyle.color = 'red';\n    }\n\n    return (\n        <div style={messageStyle}>{message}</div>\n    )\n}\n\nexport default StatusMessage","import React from 'react'\n\nconst Filter = ({changeHandler, value}) => {\n    return (\n        <form>\n            <div>\n                filter shown with <input onChange={changeHandler} value={value} />\n            </div>\n        </form>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({addNameHandler, handleNameChangeHandler, name, handleNumberChangeHandler, number}) => {\n    return (\n        <form onSubmit={addNameHandler}>\n        <div>\n          name: <input onChange={handleNameChangeHandler} value={name} />\n        </div>\n        <div>\n          number: <input onChange={handleNumberChangeHandler} value={number} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Number = ({person, filter, personRemoveHandler}) => {\n    if(person.name.toUpperCase().includes(filter.toUpperCase()))\n      return (\n        <p>\n          {person.name} {person.number}\n          <input type=\"button\" value='delete' onClick={personRemoveHandler} data-person-id={person.id}/>\n        </p>\n      )\n    return ( <></> )\n  }\n\nexport default Number;","import React from 'react'\nimport Number from './Number';\n\nconst Persons = ({persons, newFilter, personRemoveHandler}) => \n    <>\n        {\n            persons.map(person => <Number key={person.name} person={person} filter={newFilter} personRemoveHandler={personRemoveHandler} />)\n        }\n    </>\n\nexport default Persons","import axios from 'axios'\nconst baseurl = 'https://young-ravine-34039.herokuapp.com/api/persons'\n\nconst getall = () => {\n    return axios.get(baseurl)\n}\n\nconst create = person => {\n    return axios.post(baseurl, person)\n} \n\nconst update = (id, person) => {\n    return axios.put(`${baseurl}/${id}`, person)\n}\n\nconst remove = id => {\n    return axios.delete(`${baseurl}/${id}`)\n}\n\nexport default { getall, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport StatusMessage from './StatusMessage'\nimport Filter from './Filter'\nimport PersonForm from './PersonForm'\nimport Persons from './Persons'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ newFilter, setNewFilter] = useState('')\n  const [message, setMessage] = useState({\n    message: '',\n    messageType: ''\n  })\n  \n  const hook = () => {\n    personService.getall()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n\n  const addOrUpdateName = (event) => {\n    event.preventDefault();\n\n    const personIndex = persons.findIndex((person => person.name === newName))\n\n    if(personIndex !== -1)\n    {\n      if(window.confirm(`${persons[personIndex].name} is already added to phonebook, replace the old number with a new one?`)) {\n        replaceNumber(persons[personIndex].id, personIndex)\n      }\n    }\n    else {\n      AddName();\n    }\n\n  }\n  \n  const showMessage = (message, messageType, timeout) => {\n    setMessage({\n      message: message,\n      messageType: messageType\n    })\n    setTimeout(() => {\n      setMessage({\n        message: '',\n        messageType: ''\n      })\n    }, timeout);\n  };\n\n  const AddName = () => {\n\n    const personObject = {\n      \"name\": newName,\n      \"number\": newNumber\n    }\n\n    personService.create(personObject)\n      .then((response) => {\n        setPersons(persons.concat(response.data));\n        showMessage(`Added ${newName}`, 'ok', 3000)\n        setNewName('');\n        setNewNumber('');\n      })\n  }\n\n  const replaceNumber = (id, index) => {\n    console.log(`Would replace a number with id ${id}`)\n    const personObject = {\n      \"name\": newName,\n      \"number\": newNumber\n    }\n\n    personService.update(id, personObject)\n      .then(() => {\n        showMessage(`Updated ${newName}`, 'ok', 3000)\n      })\n      .catch(() => {\n        showMessage(`Information of ${newName} has already been removed from server`, 'error', 3000);\n      })\n      .finally(() => {\n        setNewName('')\n        setNewNumber('')\n        hook();\n      })\n  }\n\n  const removeName = (event) => {\n    event.preventDefault();\n\n    const id = event.target.attributes['data-person-id'].value\n\n    const confirmed = window.confirm(`Delete ${persons.filter(person => person.id.toString() === id)[0].name}?`)\n\n    if(confirmed) {\n      const removedPerson = persons.filter(person => person.id.toString() === id)[0]\n      personService.remove(id)\n      .then(() => {\n        showMessage(`Deleted ${removedPerson.name}`, 'ok', 3000)\n        hook()\n      })\n      .catch(() => {\n        showMessage(`Information of ${removedPerson.name} has already been removed from server`, 'error', 3000);\n        hook();\n      })\n    }\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handlePersonRemove = (event) => {\n    removeName(event)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <StatusMessage message={message.message} messageType={message.messageType} />\n      <Filter changeHandler={handleFilterChange} value={newFilter} />\n      <h2>add a new</h2>\n      <PersonForm\n        addNameHandler={addOrUpdateName}\n        handleNameChangeHandler={handleNameChange}\n        name={newName}\n        handleNumberChangeHandler={handleNumberChange}\n        number={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        newFilter={newFilter}\n        personRemoveHandler={handlePersonRemove}\n      />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}